/**
 * Settings UI handler for Shabbat Robot
 * Manages the settings UI components and interactions
 */

const SettingsUI = {
    // DOM elements
    elements: {
        section: null,
        autoScheduleCheckbox: null,
        hideTimeInput: null,
        restoreTimeInput: null,
        timeZoneSelect: null,
        defaultPostCheckbox: null,
        saveSettingsBtn: null,
        resetSettingsBtn: null,
        platformTabs: null,
        platformConfigs: null,
        postsSelectorTabs: null,
        postsContainer: null
    },
    
    // Active platform tab
    activePlatformTab: 'facebook',
    
    // Active posts tab
    activePostsTab: 'facebook',
    
    // Selected posts
    selectedPosts: {},
    
    /**
     * Initialize settings UI
     */
    initialize: function() {
        // Get DOM elements
        this.elements.section = document.getElementById('settings-section');
        
        if (!this.elements.section) {
            Logger.error('Settings section not found');
            return;
        }
        
        this.elements.autoScheduleCheckbox = document.getElementById('auto-schedule');
        this.elements.hideTimeInput = document.getElementById('hide-time');
        this.elements.restoreTimeInput = document.getElementById('restore-time');
        this.elements.timeZoneSelect = document.getElementById('time-zone');
        this.elements.defaultPostCheckbox = document.getElementById('default-post');
        this.elements.saveSettingsBtn = document.getElementById('save-settings');
        this.elements.resetSettingsBtn = document.getElementById('reset-settings');
        
        // Platform tabs
        this.elements.platformTabs = this.elements.section.querySelectorAll('.platform-settings .tab-btn');
        this.elements.platformConfigs = this.elements.section.querySelectorAll('.platform-config');
        
        // Posts selector
        this.elements.postsSelectorTabs = this.elements.section.querySelectorAll('.post-selector .tab-btn');
        this.elements.postsContainer = this.elements.section.querySelector('.posts-container');
        
        // Add event listeners
        if (this.elements.autoScheduleCheckbox) {
            this.elements.autoScheduleCheckbox.addEventListener('change', this.handleAutoScheduleChange.bind(this));
        }
        
        if (this.elements.saveSettingsBtn) {
            this.elements.saveSettingsBtn.addEventListener('click', this.handleSaveSettings.bind(this));
        }
        
        if (this.elements.resetSettingsBtn) {
            this.elements.resetSettingsBtn.addEventListener('click', this.handleResetSettings.bind(this));
        }
        
        // Initialize platform tabs
        this.elements.platformTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const platform = tab.getAttribute('data-platform');
                this.setActivePlatformTab(platform);
            });
        });
        
        // Initialize posts selector tabs
        this.elements.postsSelectorTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const platform = tab.getAttribute('data-platform');
                this.setActivePostsTab(platform);
            });
        });
        
        // Initialize toggle password buttons
        const togglePasswordBtns = this.elements.section.querySelectorAll('.toggle-password');
        togglePasswordBtns.forEach(btn => {
            btn.addEventListener('click', this.handleTogglePassword.bind(this));
        });
        
        // Initialize test connection buttons
        const testConnectionBtns = this.elements.section.querySelectorAll('.test-connection');
        testConnectionBtns.forEach(btn => {
            btn.addEventListener('click', this.handleTestConnection.bind(this));
        });
        
        // Load current settings
        this.loadSettings();
        
        // Set initial active tabs
        this.setActivePlatformTab(this.activePlatformTab);
        this.setActivePostsTab(this.activePostsTab);
    },
    
    /**
     * Load current settings
     */
    loadSettings: function() {
        const settings = StorageService.getSettings();
        
        // Set general settings
        if (this.elements.autoScheduleCheckbox) {
            this.elements.autoScheduleCheckbox.checked = settings.autoSchedule;
        }
        
        if (this.elements.hideTimeInput) {
            this.elements.hideTimeInput.value = settings.hideTime;
        }
        
        if (this.elements.restoreTimeInput) {
            this.elements.restoreTimeInput.value = settings.restoreTime;
        }
        
        if (this.elements.timeZoneSelect) {
            this.elements.timeZoneSelect.value = settings.timeZone;
        }
        
        if (this.elements.defaultPostCheckbox) {
            this.elements.defaultPostCheckbox.checked = settings.defaultPost;
        }
        
        // Set platform-specific settings
        Object.keys(settings.platforms).forEach(platform => {
            const config = settings.platforms[platform];
            const enableCheckbox = document.getElementById(`enable-${platform}`);
            const apiKeyInput = document.getElementById(`${platform.substring(0, 2)}-api-key`);
            const apiSecretInput = document.getElementById(`${platform.substring(0, 2)}-api-secret`);
            
            if (enableCheckbox) {
                enableCheckbox.checked = config.enabled;
            }
            
            if (apiKeyInput && config.apiKey) {
                apiKeyInput.value = config.apiKey;
            }
            
            if (apiSecretInput && config.apiSecret) {
                apiSecretInput.value = config.apiSecret;
            }
        });
        
        // Load selected excepted posts
        this.selectedPosts = {};
        settings.exceptedPosts.forEach(post => {
            if (!this.selectedPosts[post.platform]) {
                this.selectedPosts[post.platform] = [];
            }
            this.selectedPosts[post.platform].push(post.id);
        });
        
        // Update UI state based on settings
        this.updateScheduleInputsState();
    },
    
    /**
     * Update schedule inputs state based on auto-schedule checkbox
     */
    updateScheduleInputsState: function() {
        const isEnabled = this.elements.autoScheduleCheckbox && this.elements.autoScheduleCheckbox.checked;
        
        if (this.elements.hideTimeInput) {
            this.elements.hideTimeInput.disabled = !isEnabled;
        }
        
        if (this.elements.restoreTimeInput) {
            this.elements.restoreTimeInput.disabled = !isEnabled;
        }
        
        if (this.elements.timeZoneSelect) {
            this.elements.timeZoneSelect.disabled = !isEnabled;
        }
    },
    
    /**
     * Set active platform tab
     * @param {string} platform - Platform name
     */
    setActivePlatformTab: function(platform) {
        this.activePlatformTab = platform;
        
        // Update tab buttons
        this.elements.platformTabs.forEach(tab => {
            if (tab.getAttribute('data-platform') === platform) {
                tab.classList.add('active');
            } else {
                tab.classList.remove('active');
            }
        });
        
        // Update config sections
        this.elements.platformConfigs.forEach(config => {
            if (config.id === `${platform}-config`) {
                config.style.display = 'block';
            } else {
                config.style.display = 'none';
            }
        });
    },
    
    /**
     * Set active posts tab
     * @param {string} platform - Platform name
     */
    setActivePostsTab: function(platform) {
        this.activePostsTab = platform;
        
        // Update tab buttons
        this.elements.postsSelectorTabs.forEach(tab => {
            if (tab.getAttribute('data-platform') === platform) {
                tab.classList.add('active');
            } else {
                tab.classList.remove('active');
            }
        });
        
        // Load posts for the selected platform
        this.loadPlatformPosts(platform);
    },
    
    /**
     * Load posts for a platform
     * @param {string} platform - Platform name
     */
    loadPlatformPosts: function(platform) {
        if (!this.elements.postsContainer) {
            return;
        }
        
        // Show loading indicator
        this.elements.postsContainer.innerHTML = '<div class="loading">טוען פוסטים...</div>';
        
        // Check if platform is connected
        const settings = StorageService.getSettings();
        const platformConfig = settings.platforms[platform];
        
        if (!platformConfig || !platformConfig.connected) {
            this.elements.postsContainer.innerHTML = 
                '<div class="empty-state">הפלטפורמה אינה מחוברת. יש לחבר את הפלטפורמה תחילה.</div>';
            return;
        }
        
        // Get platform handler
        const platformHandlers = {
            facebook: FacebookPlatform,
            instagram: InstagramPlatform,
            youtube: YouTubePlatform,
            tiktok: TikTokPlatform
        };
        
        const platformHandler = platformHandlers[platform];
        
        if (!platformHandler) {
            this.elements.postsContainer.innerHTML = 
                '<div class="empty-state">פלטפורמה לא נתמכת</div>';
            return;
        }
        
        // Load posts based on platform
        let getPosts;
        
        switch (platform) {
            case 'facebook':
            case 'instagram':
                getPosts = platformHandler.getPosts();
                break;
            case 'youtube':
            case 'tiktok':
                getPosts = platformHandler.getVideos();
                break;
            default:
                getPosts = Promise.reject(new Error('פלטפורמה לא נתמכת'));
        }
        
        // Process posts data
        getPosts
            .then(result => {
                const items = result.posts || result.videos || [];
                
                if (items.length === 0) {
                    this.elements.postsContainer.innerHTML = 
                        '<div class="empty-state">לא נמצאו פריטי תוכן</div>';
                    return;
                }
                
                // Create posts list
                const postsHTML = items.map(item => {
                    const id = item.id;
                    const title = item.message || item.caption || item.title || item.description || 'ללא כותרת';
                    const date = item.createdTime || item.timestamp || item.publishedAt || item.created || '';
                    const formattedDate = date ? new Date(date).toLocaleDateString() : '';
                    const isSelected = this.selectedPosts[platform] && this.selectedPosts[platform].includes(id);
                    
                    return `
                        <div class="post-item ${isSelected ? 'selected' : ''}">
                            <label class="post-checkbox">
                                <input type="checkbox" data-id="${id}" ${isSelected ? 'checked' : ''}>
                                <span class="checkmark"></span>
                            </label>
                            <div class="post-details">
                                <div class="post-title">${title}</div>
                                <div class="post-date">${formattedDate}</div>
                            </div>
                        </div>
                    `;
                }).join('');
                
                this.elements.postsContainer.innerHTML = postsHTML;
                
                // Add event listeners to checkboxes
                const checkboxes = this.elements.postsContainer.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(checkbox => {
                    checkbox.addEventListener('change', () => {
                        this.handlePostSelection(platform, checkbox.getAttribute('data-id'), checkbox.checked);
                    });
                });
            })
            .catch(error => {
                this.elements.postsContainer.innerHTML = 
                    `<div class="error-state">שגיאה בטעינת פריטי תוכן: ${error.message}</div>`;
            });
    },
    
    /**
     * Handle post selection
     * @param {string} platform - Platform name
     * @param {string} postId - Post ID
     * @param {boolean} isSelected - Whether the post is selected
     */
    handlePostSelection: function(platform, postId, isSelected) {
        // Initialize platform array if not exists
        if (!this.selectedPosts[platform]) {
            this.selectedPosts[platform] = [];
        }
        
        // Add or remove post ID
        if (isSelected) {
            // Check maximum number of selected posts
            const totalSelected = Object.values(this.selectedPosts)
                .reduce((total, posts) => total + posts.length, 0);
                
            if (totalSelected >= CONFIG.MAX_EXCEPTED_POSTS) {
                // Uncheck the checkbox
                const checkbox = this.elements.postsContainer.querySelector(`input[data-id="${postId}"]`);
                if (checkbox) {
                    checkbox.checked = false;
                }
                
                // Show error message
                DashboardUI.showNotification(
                    'שגיאה', 
                    `ניתן לבחור עד ${CONFIG.MAX_EXCEPTED_POSTS} פוסטים מוחרגים`, 
                    'error'
                );
                return;
            }
            
            // Add to selected posts
            if (!this.selectedPosts[platform].includes(postId)) {
                this.selectedPosts[platform].push(postId);
            }
        } else {
            // Remove from selected posts
            this.selectedPosts[platform] = this.selectedPosts[platform].filter(id => id !== postId);
            
            // Remove platform if no posts selected
            if (this.selectedPosts[platform].length === 0) {
                delete this.selectedPosts[platform];
            }
        }
    },
    
    /**
     * Handle auto-schedule checkbox change
     */
    handleAutoScheduleChange: function() {
        this.updateScheduleInputsState();
    },
    
    /**
     * Handle toggle password button click
     * @param {Event} event - Click event
     */
    handleTogglePassword: function(event) {
        const button = event.currentTarget;
        const inputField = button.previousElementSibling;
        
        if (inputField && inputField.type) {
            if (inputField.type === 'password') {
                inputField.type = 'text';
                button.innerHTML = '<i class="fas fa-eye-slash"></i>';
            } else {
                inputField.type = 'password';
                button.innerHTML = '<i class="fas fa-eye"></i>';
            }
        }
    },
    
    /**
     * Handle test connection button click
     * @param {Event} event - Click event
     */
    handleTestConnection: function(event) {
        const button = event.currentTarget;
        const platformContainer = button.closest('.platform-config');
        
        if (!platformContainer) return;
        
        const platformId = platformContainer.id.replace('-config', '');
        
        // Get API key and secret
        const apiKeyInput = platformContainer.querySelector('input[id$="api-key"]');
        const apiSecretInput = platformContainer.querySelector('input[id$="api-secret"]');
        
        if (!apiKeyInput || !apiSecretInput) {
            DashboardUI.showNotification('שגיאה', 'לא ניתן למצוא את פרטי ה-API', 'error');
            return;
        }
        
        const apiKey = apiKeyInput.value.trim();
        const apiSecret = apiSecretInput.value.trim();
        
        if (!apiKey || !apiSecret) {
            DashboardUI.showNotification('שגיאה', 'יש להזין מפתח API וסיסמת API', 'error');
            return;
        }
        
        // Save temporary settings
        const settings = StorageService.getSettings();
        settings.platforms[platformId].apiKey = apiKey;
        settings.platforms[platformId].apiSecret = apiSecret;
        settings.platforms[platformId].enabled = true;
        StorageService.saveSettings(settings);
        
        // Test connection
        DashboardUI.showLoader(`בודק חיבור ל${platformId}...`);
        
        ApiService.testConnection(platformId)
            .then(result => {
                DashboardUI.hideLoader();
                
                if (result.connected) {
                    DashboardUI.showNotification('הצלחה', `החיבור ל${platformId} תקין`, 'success');
                } else {
                    DashboardUI.showNotification('שגיאה', `החיבור ל${platformId} נכשל: ${result.error}`, 'error');
                }
            })
            .catch(error => {
                DashboardUI.hideLoader();
                DashboardUI.showNotification('שגיאה', `בדיקת החיבור נכשלה: ${error.message}`, 'error');
            });
    },
    
    /**
     * Handle save settings button click
     */
    handleSaveSettings: function() {
        // Collect settings from form
        const settings = this.collectSettings();
        
        // Validate settings
        const validation = ValidationUtils.validateSettings(settings);
        
        if (!validation.isValid) {
            // Display validation errors
            const errorMessages = this.formatValidationErrors(validation.errors);
            DashboardUI.showNotification('שגיאה', `יש לתקן את השגיאות הבאות: ${errorMessages}`, 'error');
            return;
        }
        
        // Save settings
        StorageService.saveSettings(settings);
        
        // Restart scheduler if needed
        SchedulerService.stop();
        if (settings.autoSchedule) {
            SchedulerService.initialize();
        }
        
        // Show success message
        DashboardUI.showNotification('הצלחה', 'ההגדרות נשמרו בהצלחה', 'success');
        
        // Update dashboard UI
        if (window.DashboardUI) {
            DashboardUI.updateStatus();
            DashboardUI.updatePlatformCards();
        }
    },
    
    /**
     * Handle reset settings button click
     */
    handleResetSettings: function() {
        DashboardUI.showConfirmDialog(
            'איפוס הגדרות',
            'האם אתה בטוח שברצונך לאפס את כל ההגדרות לברירת המחדל?',
            () => {
                // Reset to default settings
                StorageService.saveSettings(CONFIG.DEFAULT_SETTINGS);
                
                // Reload settings in UI
                this.loadSettings();
                
                // Restart scheduler
                SchedulerService.stop();
                SchedulerService.initialize();
                
                // Show success message
                DashboardUI.showNotification('הצלחה', 'ההגדרות אופסו לברירת המחדל', 'success');
                
                // Update dashboard UI
                if (window.DashboardUI) {
                    DashboardUI.updateStatus();
                    DashboardUI.updatePlatformCards();
                }
            }
        );
    },
    
    /**
     * Collect settings from form
     * @returns {Object} Settings object
     */
    collectSettings: function() {
        const settings = {
            autoSchedule: this.elements.autoScheduleCheckbox ? this.elements.autoScheduleCheckbox.checked : true,
            hideTime: this.elements.hideTimeInput ? this.elements.hideTimeInput.value : '18:30',
            restoreTime: this.elements.restoreTimeInput ? this.elements.restoreTimeInput.value : '19:45',
            timeZone: this.elements.timeZoneSelect ? this.elements.timeZoneSelect.value : 'Asia/Jerusalem',
            defaultPost: this.elements.defaultPostCheckbox ? this.elements.defaultPostCheckbox.checked : true,
            platforms: {},
            exceptedPosts: []
        };
        
        // Collect platform settings
        const platforms = ['facebook', 'instagram', 'youtube', 'tiktok'];
        
        platforms.forEach(platform => {
            const enableCheckbox = document.getElementById(`enable-${platform}`);
            const apiKeyInput = document.getElementById(`${platform.substring(0, 2)}-api-key`);
            const apiSecretInput = document.getElementById(`${platform.substring(0, 2)}-api-secret`);
            
            settings.platforms[platform] = {
                enabled: enableCheckbox ? enableCheckbox.checked : false,
                apiKey: apiKeyInput ? apiKeyInput.value : '',
                apiSecret: apiSecretInput ? apiSecretInput.value : '',
                connected: StorageService.getSettings().platforms[platform].connected || false
            };
        });
        
        // Collect excepted posts
        Object.keys(this.selectedPosts).forEach(platform => {
            this.selectedPosts[platform].forEach(postId => {
                settings.exceptedPosts.push({
                    platform,
                    id: postId
                });
            });
        });
        
        return settings;
    },
    
    /**
     * Format validation errors for display
     * @param {Object} errors - Validation errors
     * @returns {string} Formatted error message
     */
    formatValidationErrors: function(errors) {
        const messages = [];
        
        if (errors.hideTime) {
            messages.push('זמן הסתרה לא תקין');
        }
        
        if (errors.restoreTime) {
            messages.push('זמן שחזור לא תקין');
        }
        
        if (errors.timeZone) {
            messages.push('אזור זמן לא תקין');
        }
        
        if (errors.exceptedPosts) {
            messages.push(errors.exceptedPosts);
        }
        
        if (errors.platforms) {
            Object.keys(errors.platforms).forEach(platform => {
                const platformErrors = errors.platforms[platform];
                if (platformErrors.apiKey) {
                    messages.push(`${platform}: מפתח API לא תקין`);
                }
                if (platformErrors.apiSecret) {
                    messages.push(`${platform}: סיסמת API לא תקינה`);
                }
            });
        }
        
        return messages.join(', ');
    }
};

// Register the UI handler
window.SettingsUI = SettingsUI;